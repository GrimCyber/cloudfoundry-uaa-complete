Project identityServer = parent.subprojects.find { "cloudfoundry-identity-server".equals(it.name) }

apply(plugin: "war")

processResources {
    //maven replaces project.artifactId in the log4j2.properties file
    //https://www.pivotaltracker.com/story/show/74344574
    from(new File('../common/src/main/resources/log4j2.properties'))
    filter { line -> line.contains('${project.artifactId}') ? line.replace('${project.artifactId}', 'cloudfoundry-identity-uaa') : line }
}

apply(plugin: "org.springframework.boot")
bootWar {
    archiveClassifier = ''
    //archiveClassifier = 'boot'
    enabled = true
}
jar { enabled = false }
war {
    archiveClassifier = ''
    enabled = false
    //workaround for maven <scope>optional</scope>
    rootSpec.exclude("**/spring-security-oauth-*.jar")
}

repositories {
    maven { url("https://repo.spring.io/libs-milestone") }
    maven { url "https://build.shibboleth.net/nexus/content/repositories/releases/" }
}

description = "UAA"
dependencies {
    implementation(project(":cloudfoundry-identity-server")) {
        exclude(module: "jna")
    }
    implementation(project(":cloudfoundry-identity-statsd-lib"))
    implementation(project(":cloudfoundry-identity-model"))
    implementation(libraries.springSecurityConfig)
    implementation(libraries.springSecurityWeb)
    implementation(libraries.springBootStarter)
    implementation(libraries.springBootStarterWeb)
    implementation(libraries.thymeLeaf) {
        exclude(module: "ognl")
    }
    implementation(libraries.thymeleafSpring) {
        exclude(module: "ognl")
    }
    implementation(libraries.thymeleafDialect) {
        exclude(module: "ognl")
    }
    implementation(libraries.thymeleafExtrasSpringSecurity) {
        exclude(module: "ognl")
    }
    runtimeOnly(libraries.springSecurityConfig)
    runtimeOnly(libraries.springRetry)
    runtimeOnly(libraries.aspectJWeaver)
    runtimeOnly(libraries.postgresql)

    implementation(libraries.braveInstrumentation)
    implementation(libraries.braveContextSlf4j)

    implementation(libraries.springWeb)
    implementation(libraries.springWebMvc)

    providedCompile(libraries.tomcatEmbed)
    implementation(libraries.bouncyCastleFipsProv)

    testImplementation(identityServer.sourceSets.test.output)

    testImplementation(project(":cloudfoundry-identity-model"))
    testImplementation(project(":cloudfoundry-identity-metrics-data"))
    testImplementation(libraries.apacheDsProtocolLdap) {
        exclude(module: "bcprov-jdk15")
        exclude(module: "slf4j-api")
        exclude(module: "slf4j-log4j12")
    }
    testImplementation(libraries.apacheLdapApi) {
        exclude(module: "slf4j-api")
    }
    testImplementation(libraries.flywayCore)
    testImplementation(libraries.hibernateValidator)
    testImplementation(libraries.selenium)
    testImplementation(libraries.seleniumRemoteDriver)
    testImplementation(libraries.dumbster) {
        exclude(module: "mail")
        exclude(module: "activation")
    }
    testImplementation(libraries.orgJson)
    testImplementation(libraries.jsonAssert)
    testImplementation(libraries.jsonPathAssert)
    testImplementation(libraries.unboundIdScimSdk) {
        exclude(module: "servlet-api")
        exclude(module: "commons-logging")
        exclude(module: "httpclient")
        exclude(module: "wink-client-apache-httpclient")
    }
    testImplementation(libraries.springBootStarterLog4j2)
    testImplementation(libraries.springContextSupport)
    testImplementation(libraries.springSessionJdbc)
    testImplementation(libraries.springTest)
    testImplementation(libraries.springSecurityLdap)
    testImplementation(libraries.springSecurityTest)
    testImplementation(libraries.springBootStarterMail)
    testImplementation(libraries.mockitoJunit5)
    testImplementation(libraries.bytebuddy)
    testImplementation(libraries.bytebuddyagent)
    testImplementation(libraries.tomcatJdbc)
    testImplementation(libraries.springRestdocs)
    testImplementation(libraries.greenmail)
    testImplementation(libraries.jodaTime)
    testImplementation(libraries.commonsIo)
    testImplementation(libraries.apacheHttpClient)
    testImplementation(libraries.openSamlApi)
    testImplementation(libraries.xmlUnit)
    testImplementation(libraries.awaitility)
    testImplementation(libraries.nimbusJwt)
}

ext {
    snippetsDir = file("build/generated-snippets")
}

test {
    exclude("org/cloudfoundry/identity/uaa/integration/*.class")
    exclude("**/*IT.class")
    exclude("**/*Docs.class")
    systemProperty("mock.suite.test", "true")

    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    // Running tests in parallel
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Count available cores. We assume 2 logical cores per physical core.
    // In case there is only one vCPU, we count 1 full core.
    var availableCpus = Math.max(Runtime.getRuntime().availableProcessors() / 2, 1.0)

    // We want some amount of parallelism, but it does not make sense to run too many
    // tests in parallel, see docs/testing. We target 4 tests in parallel at most. If
    // there are less CPUs available, we use all available CPUs but no more.
    maxParallelForks = Math.min(availableCpus, 4)
}

task populateVersionfile {
    def versionFile = new File("$projectDir/slateCustomizations/source/versionfile")
    versionFile.createNewFile()
    assert versionFile.exists()
    versionFile.text = version.toString().substring(0, version.toString().lastIndexOf(".")) + ".0"
}
task customizeSlate(type: Copy) {
    dependsOn populateVersionfile
    from("slate")
    from("slateCustomizations")
    into("build/slate")
}
task docsTestRestDocs(type: Test) {
    useJUnitPlatform()
    include("**/*Docs.class")
    systemProperty("docs.build.generated.snippets.dir", snippetsDir.getPath())
}

task(gemInstallBundle, type: Exec) {
    dependsOn("customizeSlate")
    workingDir(file("build/slate"))
    executable("gem")
    args("install", "bundler:2.7.1")
}

task(bundleInstall, type: Exec) {
    dependsOn gemInstallBundle
    dependsOn("customizeSlate")
    workingDir(file("build/slate"))
    executable("bundle")
    args("install")
}

task(deleteDefaultContent, type: Delete) {
    delete("build/slate/source/index.html.md")
}

task(slate, type: Exec) {
    dependsOn("customizeSlate", "deleteDefaultContent", "bundleInstall", "docsTestRestDocs")
    workingDir(file("build/slate"))
    executable("bundle")
    args("exec", "middleman", "build", "--verbose", "--build-dir=../docs/version/" + version.toString().substring(0, version.toString().lastIndexOf(".")) + ".0")
}

generateDocs {
    dependsOn(slate)
}

//task declarations
tasks.register('killUaa', Exec) {
    workingDir '../'
    executable = 'scripts/kill_uaa.sh'
}

// Gradle bootBuildImage task configuration
tasks.named('bootBuildImage') {
    bootBuildImage.imageName = "cloudfoundry/uaa:${version}"
    boolean doDebug = false
    def activeSpringProfiles = (System.getProperty('spring.profiles.active', '')?.split(',') ?: []) as List<String>
    if (activeSpringProfiles.contains("debugs") || Boolean.valueOf(System.getProperty("xdebugs")) ||
        activeSpringProfiles.contains("debug") || Boolean.valueOf(System.getProperty("xdebug"))) {
        doDebug = true
    }
    // https://github.com/paketo-buildpacks/bellsoft-liberica
    // use JRE since JDK gets too big
    bootBuildImage.environment.putAll([
            'BP_SPRING_CLOUD_BINDINGS_DISABLED': 'true',
            'BP_JVM_VERSION'                   : '21',
            'BP_JVM_TYPE'                      : System.getenv('BP_JVM_TYPE') ?: project.findProperty('BP_JVM_TYPE') ?: 'JRE',
            'BP_JVM_PLATFORM'                  : 'liberica'
    ])
    if (doDebug) {
        bootBuildImage.environment.put("BPL_DEBUG_ENABLED", "true")
        bootBuildImage.environment.put("BPL_DEBUG_PORT", "5005")
    }
}

integrationTest {
    //dependsOn killUaa

    filter {
        includeTestsMatching("org.cloudfoundry.identity.uaa.integration.*")
        includeTestsMatching("*IT")
    }
    String samlUrlPropKey = "integration.test.saml.url"
    String samlUrl = System.getProperty(samlUrlPropKey)
    if (samlUrl?.trim()) {
        systemProperty("integration.test.saml.url", samlUrl)
        project.logger.warn("UAA - Overriding SAML Url:"+samlUrl)
    }

}

bootRun {
    dependsOn rootProject.cleanBootTomcatDir
    mainClass = "org.cloudfoundry.experimental.boot.UaaBootApplication"
    systemProperty("logging.level.org.springframework.security", "TRACE")
    systemProperty("server.tomcat.basedir", file("../scripts/boot/tomcat/").getAbsolutePath())
    systemProperty("logging.config", file("../scripts/boot/log4j2.properties/").getAbsolutePath())
    systemProperty("SECRETS_DIR", System.getProperty("SECRETS_DIR", file("../scripts/cargo").getAbsolutePath()))
    systemProperty("spring.profiles.active", System.getProperty("spring.profiles.active", "hsqldb"))
    systemProperty("metrics.perRequestMetrics", System.getProperty("metrics.perRequestMetrics", "true"))
    systemProperty("smtp.host", "localhost")
    systemProperty("smtp.port", 2525)
    systemProperty("java.security.egd", "file:/dev/./urandom")
    systemProperty("CLOUDFOUNDRY_CONFIG_PATH", file("../scripts/cargo").getAbsolutePath())
    systemProperty("server.servlet.context-path", "/uaa")
    systemProperty("statsd.enabled", "true")
}




