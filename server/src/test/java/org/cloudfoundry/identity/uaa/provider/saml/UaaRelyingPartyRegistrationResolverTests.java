/*
 * Copyright 2002-2020 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.cloudfoundry.identity.uaa.provider.saml;

import org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.mock.web.MockHttpServletRequest;
import org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationException;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistrationRepository;
import org.springframework.security.saml2.provider.service.registration.Saml2MessageBinding;

import java.security.Security;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatExceptionOfType;
import static org.assertj.core.api.Assertions.assertThatIllegalArgumentException;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;

/**
 * Tests for {@link UaaRelyingPartyRegistrationResolver}
 */
class UaaRelyingPartyRegistrationResolverTests {

    private static final String SIMPLE_SAML_RESPONSE = "";

    private RelyingPartyRegistration registration;

    private RelyingPartyRegistrationRepository repository;

    private UaaRelyingPartyRegistrationResolver resolver;

    @BeforeAll
    static void beforeAll() {
        Security.addProvider(new BouncyCastleFipsProvider());
    }

    @BeforeEach
    void beforeEach() {
        registration = mock(RelyingPartyRegistration.class);
        repository = mock(RelyingPartyRegistrationRepository.class);
        resolver = new UaaRelyingPartyRegistrationResolver(repository, "clouodfoundry-saml-login");
    }

    @Test
    void resolveWhenRequestContainsRegistrationIdThenResolves() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setPathInfo("/some/path/" + this.registration.getRegistrationId());
        assertThat(resolver.convert(request)).isNull();
    }

    @Test
    void resolveWhenRequestContainsInvalidRegistrationIdThenNull() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setPathInfo("/some/path/not-" + this.registration.getRegistrationId());
        assertThat(resolver.convert(request)).isNull();
    }

    @Test
    void resolveWhenRequestIsMissingRegistrationIdThenNull() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        assertThat(resolver.convert(request)).isNull();
    }

    @Test
    void resolveWhenRequestIsWithInvalidSamlResponse() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setPathInfo("/some/path/clouodfoundry-saml-login");
        request.setMethod("POST");
        request.setParameter("SAMLResponse", "PGJhc2U2ND4=");
        assertThatExceptionOfType(Saml2AuthenticationException.class).isThrownBy(() -> resolver.resolve(request, null));
    }

    @Test
    void resolveWhenRequestIsWithValiddSamlResponseFromSimplySamlButNoTrust() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        request.setPathInfo("/some/path/clouodfoundry-saml-login");
        request.setMethod("POST");
        request.setParameter("SAMLResponse", SIMPLE_SAML_RESPONSE);
        assertThat(resolver.resolve(request, null)).isNull();
    }

    @Test
    void resolveWhenRequestIsWithValiddSamlResponseFromSimplySaml() {
        MockHttpServletRequest request = new MockHttpServletRequest();
        RelyingPartyRegistration newMock = mock(RelyingPartyRegistration.class);
        RelyingPartyRegistration.AssertingPartyDetails details = mock(RelyingPartyRegistration.AssertingPartyDetails.class);
        doReturn("simpleID").when(newMock).getRegistrationId();
        doReturn("simpleEndityID").when(newMock).getEntityId();
        doReturn(details).when(newMock).getAssertingPartyDetails();
        doReturn("simpleEndityID").when(details).getEntityId();
        doReturn("sso").when(details).getSingleSignOnServiceLocation();
        doReturn("acs").when(newMock).getAssertionConsumerServiceLocation();
        doReturn(mock(Saml2MessageBinding.class)).when(newMock).getSingleLogoutServiceBinding();
        doReturn(mock(Saml2MessageBinding.class)).when(details).getSingleSignOnServiceBinding();
        doReturn(mock(Saml2MessageBinding.class)).when(newMock).getAssertionConsumerServiceBinding();
        doReturn(newMock).when(repository).findByRegistrationId("http://uaa-acceptance.cf-app.com/saml-idp");
        request.setPathInfo("/some/path/clouodfoundry-saml-login");
        request.setMethod("POST");
        request.setParameter("SAMLResponse", SIMPLE_SAML_RESPONSE);
        assertThat(resolver.resolve(request, null).getEntityId()).isEqualTo("simpleEndityID");
    }

    @Test
    void constructorWhenNullRelyingPartyRegistrationThenIllegalArgument() {
        assertThatIllegalArgumentException().isThrownBy(() -> new UaaRelyingPartyRegistrationResolver(null, null));
    }
}
